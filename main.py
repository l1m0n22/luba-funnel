# main.py
import os
import asyncio
import time
import hmac
import hashlib
import base64
from datetime import timedelta
from io import BytesIO
from urllib.parse import urlencode, urlparse, urlunparse, parse_qsl

from dotenv import load_dotenv
from aiohttp import web

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, JobQueue

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ PTB
try:
    from telegram import FSInputFile as _PTB_FSInput  # PTB 20+
except Exception:
    try:
        from telegram import InputFile as _PTB_FSInput  # PTB 13.x
    except Exception:
        _PTB_FSInput = None

# Pillow –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∏
from PIL import Image, ImageOps

load_dotenv()

# ===== ENV =====
BOT_TOKEN = os.getenv("FUNNEL_BOT_TOKEN")
SITE_URL  = os.getenv("SITE_URL", "https://next-level-form.onrender.com")
FUNNEL_BASE_URL = os.getenv("FUNNEL_BASE_URL")               # –ø—É–±–ª–∏—á–Ω—ã–π URL —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (–¥–ª—è /go)
FUNNEL_SIGNING_SECRET = os.getenv("FUNNEL_SIGNING_SECRET")   # –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç –ë–û–¢<>–ë–≠–ö

# –§–û–¢–û –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º 1..5 (–ø–æ–ª–æ–∂–∏ —Ñ–∞–π–ª—ã —Ä—è–¥–æ–º —Å main.py –∏–ª–∏ —É–∫–∞–∂–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏/URL)
PHOTO1 = os.getenv("FUNNEL_PHOTO1", "photo_2025-08-23_23-07-59.jpg")
PHOTO2 = os.getenv("FUNNEL_PHOTO2", "photo_2025-08-23_23-08-29.jpg")
PHOTO3 = os.getenv("FUNNEL_PHOTO3", "photo_2025-08-23_23-59-13.jpg")
PHOTO4 = os.getenv("FUNNEL_PHOTO4", "photo_2025-08-24_00-00-54.jpg")
PHOTO5 = os.getenv("FUNNEL_PHOTO5", "photo_2025-08-24_00-01-43.jpg")

if not BOT_TOKEN:
    raise RuntimeError("–í .env –Ω–µ—Ç FUNNEL_BOT_TOKEN")
if not FUNNEL_SIGNING_SECRET:
    raise RuntimeError("–í .env –Ω–µ—Ç FUNNEL_SIGNING_SECRET")

# –¢–æ–ª—å–∫–æ ¬´submitted¬ª –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Ç–º–µ–Ω—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∫–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ ‚Äî –Ω–µ—Ç)
submitted: set[int] = set()

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))

# ===== –¢–ï–ö–°–¢–´ =====
MSG1 = "Salom! Biz xursandmiz, Siz deyarli jamoamizga qo‚Äòshildingi üöÄ"
def msg2(link: str) -> str:
    return (
        "Jietti brendining ambassadori bo‚Äòlish uchun qisqa anketa to‚Äòldiring. "
        "Biz 2 soat ichida Siz bilan bog‚Äòlanamiz."
        f"\n\nHavola: {link}"
    )
MSG3 = "Tabriklaymiz! üéâ Arizangiz qabul qilindi. Tez orada menejerimiz Siz bilan bog‚Äòlanadi."
MSG4 = "Eslatma: anketani hali to‚Äòldirmadingiz. ‚è≥ Joylar soni cheklangan."
MSG5 = "Oxirgi eslatma! üö® Faqat bir nechta joy qoldi. Qulay paytda to‚Äòldiring."

# ===== –£–¢–ò–õ–ò–¢–´: –ø–æ–¥–ø–∏—Å—å –∏ —Å—Å—ã–ª–∫–∏ =====
def _b64url(b: bytes) -> str:
    return base64.urlsafe_b64encode(b).decode().rstrip("=")

def _sign_payload(chat_id: int, ts: int) -> str:
    key = FUNNEL_SIGNING_SECRET.encode()
    msg = f"{chat_id}:{ts}".encode()
    return _b64url(hmac.new(key, msg, hashlib.sha256).digest())

def _verify(chat_id: int, ts: int, sig: str, ttl_sec: int = 172800) -> bool:
    # –ø–æ–¥–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 48 —á–∞—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if abs(int(time.time()) - int(ts)) > ttl_sec:
        return False
    try:
        return hmac.compare_digest(sig, _sign_payload(int(chat_id), int(ts)))
    except Exception:
        return False

def make_signed_params(chat_id: int) -> dict[str, str]:
    ts = int(time.time())
    sig = _sign_payload(chat_id, ts)
    return {"c": str(chat_id), "ts": str(ts), "sig": sig}

def _add_query(url: str, extra: dict[str, str]) -> str:
    u = urlparse(url)
    q = dict(parse_qsl(u.query))
    q.update(extra)
    return urlunparse((u.scheme, u.netloc, u.path, u.params, urlencode(q), u.fragment))

def make_track_link(chat_id: int) -> str:
    params = make_signed_params(chat_id)
    if FUNNEL_BASE_URL:
        return _add_query(f"{FUNNEL_BASE_URL.rstrip('/')}/go", params)  # —á–µ—Ä–µ–∑ –Ω–∞—à —Ä–µ–¥–∏—Ä–µ–∫—Ç
    return _add_query(SITE_URL, params)                                 # –ø—Ä—è–º–æ–π –Ω–∞ —Å–∞–π—Ç (—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)

# ===== –£–¢–ò–õ–ò–¢–´: —Ñ–æ—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∞ (—Å –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –ø—Ä–∏ –æ—à–∏–±–∫–µ) =====
def _resolve_path(p: str) -> str:
    if not p:
        return ""
    p = p.strip()
    if p.startswith(("http://", "https://")):
        return p
    if os.path.isabs(p) and os.path.exists(p):
        return p
    return os.path.join(SCRIPT_DIR, p)

def _build_photo_arg(path_or_url: str):
    """–ì–æ—Ç–æ–≤–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è send_photo(): URL-—Å—Ç—Ä–æ–∫–∞, FSInputFile/InputFile, ('_FILEPATH_', abs) –∏–ª–∏ None."""
    if not path_or_url:
        return None
    p = _resolve_path(path_or_url)
    if p.startswith(("http://", "https://")):
        return p
    if os.path.exists(p):
        if _PTB_FSInput is not None:
            try:
                return _PTB_FSInput(p)
            except Exception as e:
                print(f"[PHOTO] FSInputFile/InputFile –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {p}: {e}")
        return ("_FILEPATH_", p)
    print(f"[PHOTO] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {p}")
    return None

def _local_path_if_any(path_or_url: str) -> str | None:
    if not path_or_url:
        return None
    p = _resolve_path(path_or_url)
    if p.startswith(("http://", "https://")):
        return None
    return p if os.path.exists(p) else None

def _reencode_to_jpeg_bytes(path: str) -> BytesIO:
    im = Image.open(path)
    im = ImageOps.exif_transpose(im).convert("RGB")
    max_dim = 4096
    if max(im.size) > max_dim:
        im.thumbnail((max_dim, max_dim))
    bio = BytesIO()
    im.save(bio, format="JPEG", quality=85, optimize=True, progressive=False)
    bio.seek(0)
    return bio

async def send_with_photo(bot, chat_id: int, text: str,
                          kb: InlineKeyboardMarkup | None = None,
                          photo_path: str | None = None):
    """1) –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –µ—Å—Ç—å; 2) –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ–º –≤ JPEG; 3) —Ñ–æ–ª–±—ç–∫ ‚Äî —Ç–µ–∫—Å—Ç."""
    ph = _build_photo_arg(photo_path) if photo_path else None
    local_path = _local_path_if_any(photo_path) if photo_path else None

    # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞
    try:
        if isinstance(ph, tuple) and ph[0] == "_FILEPATH_":
            with open(ph[1], "rb") as f:
                await bot.send_photo(chat_id=chat_id, photo=f, caption=text, reply_markup=kb)
        elif ph is not None:
            await bot.send_photo(chat_id=chat_id, photo=ph, caption=text, reply_markup=kb)
        else:
            raise RuntimeError("–ù–µ—Ç —Ñ–æ—Ç–æ (ph=None)")
        return
    except Exception as e:
        print(f"[PHOTO] –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å ({photo_path}): {e}")

    # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ –≤ JPEG
    if local_path:
        try:
            bio = _reencode_to_jpeg_bytes(local_path)
            await bot.send_photo(chat_id=chat_id, photo=bio, caption=text, reply_markup=kb)
            print("[PHOTO] –ü–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–ª–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ JPEG ‚úì")
            return
        except Exception as e2:
            print(f"[PHOTO] –ü–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e2}")

    # –§–æ–ª–±—ç–∫ ‚Äî —Ç–µ–∫—Å—Ç
    print("[PHOTO] –ü–∞–¥–∞–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ–ª–±—ç–∫")
    await bot.send_message(chat_id=chat_id, text=text, reply_markup=kb)

# ===== –ö–õ–ê–í–ò–ê–¢–£–†–ê =====
def one_button_kb(chat_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("üîó –ê–Ωketani to‚Äòldirish", url=make_track_link(chat_id))]])

# ===== JobQueue =====
def cancel_user_jobs(jq: JobQueue, chat_id: int):
    for name in (f"f60:{chat_id}", f"f24h:{chat_id}"):
        for j in jq.get_jobs_by_name(name):
            j.schedule_removal()

async def reminder_job(context: ContextTypes.DEFAULT_TYPE):
    """–®–ª—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (4/5) —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ä–º—É."""
    chat_id = context.job.chat_id
    payload = context.job.data or {}
    text  = payload.get("text", "")
    photo = payload.get("photo")
    if chat_id not in submitted:
        await send_with_photo(context.bot, chat_id, text, one_button_kb(chat_id), photo)

# ===== Handlers =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    submitted.discard(chat_id)  # –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª

    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—É—Ç–µ–π –∫ —Ñ–æ—Ç–æ
    for i, ph in enumerate([PHOTO1, PHOTO2, PHOTO3, PHOTO4, PHOTO5], start=1):
        rp = _resolve_path(ph)
        exists = (os.path.exists(rp) if not rp.startswith("http") else "url")
        print(f"[PHOTO] PHOTO{i} -> {rp} | exists={exists}")

    link = make_track_link(chat_id)

    # 1 –∏ 2 ‚Äî —Å—Ä–∞–∑—É
    await send_with_photo(context.bot, chat_id, MSG1, None, PHOTO1)
    await send_with_photo(context.bot, chat_id, msg2(link), one_button_kb(chat_id), PHOTO2)

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ 1 —á–∞—Å –∏ 24 —á–∞—Å–∞ (4 –∏ 5)
    jq: JobQueue = context.job_queue
    cancel_user_jobs(jq, chat_id)
    jq.run_once(reminder_job, when=timedelta(minutes=5),   chat_id=chat_id,
                data={"text": MSG4, "photo": PHOTO4}, name=f"f60:{chat_id}")
    jq.run_once(reminder_job, when=timedelta(minutes=5),    chat_id=chat_id,
                data={"text": MSG5, "photo": PHOTO5}, name=f"f24h:{chat_id}")

async def site_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_with_photo(context.bot, update.effective_chat.id,
                          make_track_link(update.effective_chat.id), None, PHOTO2)

# ===== HTTP: /go ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–æ–∫—Å–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ù–ò–ß–ï–ì–û –ù–ï –û–¢–ú–ï–ù–Ø–ï–ú =====
async def go_handler(request: web.Request):
    chat_id = request.query.get("c", "")
    ts  = request.query.get("ts", "")
    sig = request.query.get("sig", "")
    # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ª–µ–Ω–¥–∏–Ω–≥ —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    dest = _add_query(SITE_URL, {"c": chat_id, "ts": ts, "sig": sig})
    raise web.HTTPFound(dest)

# ===== HTTP: /mark-submitted ‚Äî –±—ç–∫–µ–Ω–¥ –∑–æ–≤—ë—Ç –ø–æ—Å–ª–µ —É–¥–∞—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã =====
async def mark_submitted(request: web.Request):
    from telegram.ext import Application as PTBApp
    ptb_app: PTBApp = request.app["ptb_app"]

    try:
        payload = await request.json()
        chat_id = int(str(payload.get("c", "")))
        ts  = int(str(payload.get("ts", "")))
        sig = str(payload.get("sig", ""))
    except Exception:
        return web.json_response({"ok": False, "error": "bad json"}, status=400)

    if not _verify(chat_id, ts, sig):
        return web.json_response({"ok": False, "error": "bad signature"}, status=403)

    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ —Ñ–æ—Ä–º—É –∏ –æ—Ç–º–µ–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    submitted.add(chat_id)
    cancel_user_jobs(ptb_app.job_queue, chat_id)

    # –°–æ–æ–±—â–µ–Ω–∏–µ 3 ‚Äî –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    try:
        await send_with_photo(ptb_app.bot, chat_id, MSG3, None, PHOTO3)
    except Exception as e:
        print(f"[PHOTO] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")

    return web.json_response({"ok": True})

# ===== Web server =====
async def start_web(ptb_app: Application) -> web.AppRunner:
    app = web.Application()
    app["ptb_app"] = ptb_app
    app.add_routes([
        web.get("/go", go_handler),
        web.post("/mark-submitted", mark_submitted),
    ])
    port = int(os.getenv("PORT", "8080"))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=port)
    await site.start()
    return runner

# ===== Entrypoint =====
async def main_async():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("site", site_cmd))

    # –ó–∞–ø—É—Å–∫–∞–µ–º PTB –±–µ–∑ .run_polling (—á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å —Ç–µ–∫—É—â–∏–º loop)
    await app.initialize()
    await app.start()
    await app.updater.start_polling(allowed_updates=["message"])

    runner = await start_web(app)
    try:
        await asyncio.Event().wait()
    finally:
        await app.updater.stop()
        await app.stop()
        await app.shutdown()
        await runner.cleanup()

if __name__ == "__main__":
    asyncio.run(main_async())
